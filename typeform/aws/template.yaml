AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  4me-s3-bucket-lambda

  Sample SAM Template for 4me-s3-bucket-lambda

Parameters:
  4MeDomainParameter:
    Type: String
    Default: 4me-demo.com
  BootstrapSecretApplicationParameter:
    Type: String
    Default: 4me-app-builder
  BootstrapSecretAccountParameter:
    Type: String
    Default: wdc
  offeringReferenceParameter:
    Type: String
    Default: typeform

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 3
    CodeUri: integration-lambda/
    Handler: app.lambdaHandler
    Runtime: nodejs14.x

Resources:
  IntegrationFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Zip
      MemorySize: 128
      Environment: 
        Variables:
          PARAM_4ME_DOMAIN: !Ref 4MeDomainParameter
          PARAM_OFFERING_REFERENCE: !Ref offeringReferenceParameter
          PARAM_BOOTSTRAP_APP: !Ref BootstrapSecretApplicationParameter
          PARAM_BOOTSTRAP_ACCOUNT: !Ref BootstrapSecretAccountParameter
      Events:
        Integration:
          Type: Api
          Properties:
            Path: /integration
            Method: POST
        SecretsEventListener:
          Type: CloudWatchEvent
          Properties:
#            Description: "Intercept events from Secrets Manager to get informed on new/updated installations of this integration"
            Pattern:
              source:
                - aws.secretsmanager
              detail-type:
                - AWS API Call via CloudTrail
              detail:
                eventSource:
                  - secretsmanager.amazonaws.com
                eventName:
                  - CreateSecret
                  - PutSecretValue

      Policies:
      - Statement:
        - Sid: ReadSecrets
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BootstrapSecretApplicationParameter}/${4MeDomainParameter}/${BootstrapSecretAccountParameter}-*"
        - Sid: ReadWriteInstanceSecrets
          Effect: Allow
          Action:
          - secretsmanager:GetSecretValue
          - secretsmanager:PutSecretValue
          Resource: !Sub "arn:aws:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${BootstrapSecretApplicationParameter}/${offeringReferenceParameter}/${4MeDomainParameter}/instances/*"
    Metadata:
      DockerTag: nodejs14.x-v1
      DockerContext: ./integration-lambda
      Dockerfile: Dockerfile

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  IntegrationApi:
    Description: "API Gateway endpoint URL for Prod stage for Integration Function"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/${ServerlessRestApi.Stage}/integration/"
  IntegrationFunction:
    Description: "Integration Lambda Function ARN"
    Value: !GetAtt IntegrationFunction.Arn
  IntegrationFunctionIamRole:
    Description: "Implicit IAM Role created for Integration Function"
    Value: !GetAtt IntegrationFunctionRole.Arn
